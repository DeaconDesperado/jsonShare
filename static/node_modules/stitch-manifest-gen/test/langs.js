'use strict';

var assert = require('should');
var main = require('../main.js');

describe('computeLangs', function() {
  it('returns empty list if input empty', function() {
    main.computeLangs([]).should.have.length(0);
  });

  it('returns top level supportedLangs', function() {
    main.computeLangs([
      {SupportedLanguages: ['en', 'fr-CA', 'zh-Hant-TW']}
    ]).should.have.length(3).and.eql(['en', 'fr-CA', 'zh-Hant-TW']);
  });

  it('returns union of supportedLangs', function() {
    main.computeLangs([
      {SupportedLanguages: ['en', 'fr-CA', 'zh-Hant-TW']},
      {SupportedLanguages: ['fr-CA', 'zh']},
      {SupportedLanguages: ['en', 'se', 'zh-Hant-TW']},
      {SupportedLanguages: []}
    ]).should.have.length(5).and.eql(['en', 'fr-CA', 'zh-Hant-TW', 'zh', 'se']);
  });

  it('can have no SupportedLanguages field present', function() {
    main.computeLangs([
      {SupportedLanguages: ['en', 'fr-CA', 'zh-Hant-TW']},
      {SupportedLanguages: ['fr-CA', 'zh']},
      {SupportedLanguages: ['en', 'se', 'zh-Hant-TW']},
      {SupportedLanguages: []},
      {}
    ]).should.have.length(5).and.eql(['en', 'fr-CA', 'zh-Hant-TW', 'zh', 'se']);
  });

  it('picks SupportedLanguages out of the spotify json dict', function() {
    main.computeLangs([
      {AppName: 'app', Version: '1.2.3', SupportedLanguages: ['en', 'fr-CA', 'zh-Hant-TW']},
      {AppName: 'api', Version: '1.2.3', SupportedLanguages: ['fr-CA', 'zh']},
      {AppName: 'views', Version: '1.2.3', SupportedLanguages: ['en', 'se', 'zh-Hant-TW']},
    ]).should.have.length(5).and.eql(['en', 'fr-CA', 'zh-Hant-TW', 'zh', 'se']);
  });

  it('replaces all _ with -', function() {
    main.computeLangs([
      {SupportedLanguages: ['en', 'fr-CA', 'zh-Hant-TW']},
      {SupportedLanguages: ['en', 'fr_CA', 'zh_Hant_TW', 'en_US']},
    ]).should.have.length(4).and.eql(['en', 'fr-CA', 'zh-Hant-TW', 'en-US']);
  });
});

describe('fillDictionary', function() {
  it('should fill an empty dict with empty strings', function() {
    main.fillDictionary({}, ['en', 'se', 'es-LA']).
      should.include({
        'en': '',
        'se': '',
        'es-LA': ''
      });
  });

  it('fills with the english term if it exists', function() {
    main.fillDictionary({'en': 'term'}, ['en', 'se', 'es-LA']).
      should.include({
        'en': 'term',
        'se': 'term',
        'es-LA': 'term'
      });
  });

  it('does not override existing terms', function() {
    main.fillDictionary({'en': 'term', 'se': 'ord'}, ['en', 'se', 'es-LA']).
      should.include({
        'en': 'term',
        'se': 'ord',
        'es-LA': 'term'
      });
  });

  it('defaults to first term if no english', function() {
    main.fillDictionary({'se': 'ord'}, ['en', 'se', 'es-LA']).
      should.include({
        'en': 'ord',
        'se': 'ord',
        'es-LA': 'ord'
      });
  });
});
